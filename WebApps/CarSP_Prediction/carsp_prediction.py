# -*- coding: utf-8 -*-
"""CarSP_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17P8ptxFNmmIaFxMrQsZylXwGwXkE1QBt
"""

import pandas as pd

df = pd.read_csv('car data.csv')

df.head()

df.shape

df['Seller_Type'].unique()

df['Owner'].unique()

df['Year'].unique()

df.isnull().sum()

df.describe()

df.columns

final_df = df[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven','Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']]

final_df.head()

final_df['Total_Year'] = 2021

final_df.head()

final_df['Total_Year'] = final_df['Total_Year'] - final_df['Year']

final_df.head()

final_df.drop(['Year'],axis=1,inplace=True)

final_df.head()

final_df = pd.get_dummies(final_df,drop_first=True)

final_df.head()

final_df.corr()

import seaborn as sns

sns.pairplot(final_df)

import matplotlib.pyplot as plt
# %matplotlib inline
corrmat  = final_df.corr()

top_corr = corrmat.index
plt.figure(figsize=(40,40))

g = sns.heatmap(final_df[top_corr].corr(),annot=True,cmap='RdYlGn')

X = final_df.iloc[:,1:]
y = final_df.iloc[:,0]

X.head()

y.head()

from sklearn.ensemble import ExtraTreesRegressor

model = ExtraTreesRegressor()
model.fit(X,y)

model.feature_importances_

feature_imp = pd.Series(model.feature_importances_,index=X.columns)
feature_imp.nlargest(5).plot(kind='barh')
plt.show()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)

from sklearn.ensemble import RandomForestRegressor

reg = RandomForestRegressor()

import numpy as np

# Number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]
# Number of features to consider at every split
max_features = ['auto', 'sqrt']
# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]
# max_depth.append(None)
# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10, 15, 100]
# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 5, 10]

from sklearn.model_selection import RandomizedSearchCV

random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf}

rf = RandomizedSearchCV(estimator = reg, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)

rf.fit(X_train,y_train)

rf.best_params_

rf.best_score_

predictions=rf.predict(X_test)

sns.distplot(y_test-predictions)

plt.scatter(y_test,predictions)

from sklearn import metrics
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))

import pickle
# open a file, where you ant to store the data
file = open('random_forest_regression_model.pkl', 'wb')

# dump information to that file
pickle.dump(rf, file)

