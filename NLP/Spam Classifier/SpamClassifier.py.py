# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ue360kZ1E0K9tUTRgqWU3Qs3VzsCIF9s
"""

# Importing Libraries
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
import pandas as pd
import re
from nltk.stem import WordNetLemmatizer
from sklearn.model_selection import train_test_split

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

message = pd.read_csv('spams',sep='\t',names=["label","message"])

"""# By using Stemming"""

ps = PorterStemmer()

corpus = []
nltk.download('stopwords')

for i in range(0,len(message)):
    review = re.sub('[^a-zA-Z]',' ',message['message'][i])
    review = review.lower()
    review = review.split()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)

cv = CountVectorizer(max_features=5000)

X_stem = cv.fit_transform(corpus).toarray()

y_stem = pd.get_dummies(message['label'])
y_stem = y_stem.iloc[:,1].values

X_stem_train,X_stem_test,y_stem_train,y_stem_test = train_test_split(X_stem,y_stem,test_size=0.2,random_state=0)

spam_detect_model_stem = MultinomialNB().fit(X_stem_train,y_stem_train)

y_stem_pred = spam_detect_model_stem.predict(X_stem_test)
cfmtrx_stem = confusion_matrix(y_stem_test,y_stem_pred)

cfmtrx_stem

acc_stem = accuracy_score(y_stem_test,y_stem_pred)
acc_stem

"""#By Using Lemmatization"""

wl = WordNetLemmatizer()

corpus2 = []
nltk.download('wordnet')

for i in range(0,len(message)):
    review = re.sub('[^a-zA-Z]',' ',message['message'][i])
    review = review.lower()
    review = review.split()
    review = [wl.lemmatize(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus2.append(review)

tfidf = TfidfVectorizer()

X_lemm = cv.fit_transform(corpus2).toarray()

y_lemm = pd.get_dummies(message['label'])
y_lemm = y_lemm.iloc[:,1].values

X_lemm_train,X_lemm_test,y_lemm_train,y_lemm_test = train_test_split(X_lemm,y_lemm,test_size=0.2,random_state=0)

spam_detect_model_lemm = MultinomialNB().fit(X_lemm_train,y_lemm_train)

y_lemm_pred = spam_detect_model_lemm.predict(X_lemm_test)

cfmtrx_lemm = confusion_matrix(y_lemm_test,y_lemm_pred)

cfmtrx_lemm

accc_lemm = accuracy_score(y_lemm_test,y_lemm_pred)

accc_lemm

acc_stem